// 내 풀이
// 문제를 보고 permutation이 생각나서 풀었는데 모든 TC는 다 통과가 되지만
// 프로그래머스에선 런타임에러가 뜸.. 이유는 모르겠다..

class Solution {
    
    int max = -1;
    
    public String solution(int[] numbers) {
        int n = numbers.length;
        int[] output = new int[n];
        boolean[] visited = new boolean[n];
        
        perm(0, numbers, n, output, visited);
        
        return Integer.toString(max);
    }
    
    public void perm(int depth, int[]num, int n, int[] output, boolean[] visited){
        if(depth == n){
            StringBuilder sb = new StringBuilder();
            for(int i : output)
                sb.append(i);
            
            int val = Integer.parseInt(sb.toString());
            
            if(max < val)
                max = val;
            
            return;
        }
        
        for(int i=0; i<n; i++){
            if(!visited[i]){
                visited[i] = true;
                output[depth] = num[i];
                perm(depth+1, num, n, output, visited);
                visited[i] = false;
            }
        }
    }
}

// 두번 째 풀이
import java.util.*;

class Solution {
    public String solution(int[] numbers) {
        String answer = "";
        
        PriorityQueue<String> que = new PriorityQueue<>(new Comparator<String>(){
            @Override
	// 내림차순으로 정렬하면 된다
            public int compare(String a, String b){
                return (b + a).compareTo(a + b);
            }
        });
        
        for(int num : numbers)
            que.offer(String.valueOf(num));
        
        while(!que.isEmpty())
            answer += que.poll();
        
        return answer.charAt(0) == '0' ? "0" : answer;
    }
}

// 참고한 다른 사람 풀이
import java.util.Arrays;
import java.util.Comparator;

class Solution {
    public String solution(int[] numbers) {
        Integer[] array = new Integer[numbers.length];
        for (int i=0; i<numbers.length; i++) 
            array[i] = numbers[i];

        Arrays.sort(array, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                String tmp1 = o1.toString();
                String tmp2 = o2.toString();
                return ((tmp2+tmp1)).compareTo(tmp1+tmp2);
            }
        });

        String answer = "";
        for(int i=0; i<array.length; i++){
            answer += String.valueOf(array[i]); 
        }

        if("0".equals(answer.substring(0, 1)))
            return "0";

        return answer;
    }
}

// 참고한 다른 사람 풀이 2
import java.util.*;
class Solution {
    public String solution(int[] numbers) {
        PriorityQueue<String> pq = new PriorityQueue<String>(new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
	    // == return (s2 + s1).compareTo(s1 + s2);
                return Integer.parseInt(s2 + s1) - Integer.parseInt(s1 + s2);
            }
        });
        String ans = "";

        for (int num : numbers) {
            pq.offer(String.valueOf(num));
        }

        while (!pq.isEmpty()) {
            ans += pq.poll();
        }

        if (ans.charAt(0) == '0')
            return "0";
        //if (Integer.parseInt(ans) == 0)
        //    return "0";   -> int 형 범위를 넘어서 에러가 남
        return ans;
    }
}