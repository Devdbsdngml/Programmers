class Solution {
    int answer = 0;
    public int solution(int[] numbers, int target) {
        dfs(numbers, target, 0);
        return answer;
    }
    
    void dfs(int[] numbers, int target, int depth){
        if(depth == numbers.length){
            int sum = 0;
            for(int i : numbers)
                sum += i;
            
            if(sum == target)
                answer++;
            
            return;
        } else{
            numbers[depth] *= 1;
            dfs(numbers, target, depth + 1);
            
            numbers[depth] *= -1;
            dfs(numbers, target, depth + 1);
        }
    }
}


// 다른 사람 풀이
// 알고리즘은 비슷한 것 같은데 깔끔하다..

class Solution {
    public int solution(int[] numbers, int target) {
        int answer = 0;
        answer = dfs(numbers, 0, 0, target);
        return answer;
    }
    int dfs(int[] numbers, int n, int sum, int target) {
        if(n == numbers.length) {
            if(sum == target) {
                return 1;
            }
            return 0;
        }
        return dfs(numbers, n + 1, sum + numbers[n], target) + dfs(numbers, n + 1, sum - numbers[n], target);
    }
}