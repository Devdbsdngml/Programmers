// 첫번째 풀이

import java.util.*;

class Solution {
    class Point{
        int x;
        int y;
        int cost;

        Point(int x, int y, int cost){
            this.x = x;
            this.y = y;
            this.cost = cost;
        }
    }

    int[] dx = {1, 0, -1, 0};
    int[] dy = {0, 1, 0, -1};
    boolean[][] visited;
    Queue<Point> que;

    int n;
    int m;

    public int solution(int[][] maps) {
        n = maps.length;
        m = maps[0].length;
        visited = new boolean[n][m];

        return bfs(0, 0, maps);
    }

    int bfs(int x, int y, int[][] maps){
        que = new LinkedList<>();
        visited[x][y] = true;
        que.offer(new Point(x, y, 1));

        while(!que.isEmpty()){
            Point point = que.poll();

            if(point.x == n-1 && point.y == m-1) return point.cost; // 마지막 좌표에 도달 시 return cost

            for(int i=0; i<4; i++){

                int nx = point.x + dx[i];
                int ny = point.y + dy[i];
                // 범위 안
                if(0 <= nx && nx < n && 0 <= ny && ny < m){
                    if(maps[nx][ny] == 1 && !visited[nx][ny]){
                        visited[nx][ny] = true;
                        que.offer(new Point(nx, ny, point.cost+1));
                    }
                }
            }
        }

        return -1;
    }
}

// 두번째 풀이

import java.util.*;

class Solution {
    static class Point{
        int x;
        int y;

        public Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    static Queue<Point> que;
    static boolean[][] visited;

    static int[] dx = {1, 0, -1, 0};
    static int[] dy = {0, 1, 0, -1};

    static int n;
    static int m;
    public static int solution(int[][] maps) {
        n = maps.length;
        m = maps[0].length;
        visited = new boolean[n][m];

        bfs(0, 0, maps);

        return maps[n-1][m-1] != 1 ? maps[n-1][m-1] : -1;
    }

    private static void bfs(int x, int y, int[][] maps) {
        que = new LinkedList<>();
        que.offer(new Point(x, y));
        visited[x][y] = true;

        while(!que.isEmpty()){
            Point point = que.poll();

            for(int i=0; i<4; i++){
                int nx = point.x + dx[i];
                int ny = point.y + dy[i];

                if(0 <= nx && nx < n && 0 <= ny && ny < m){
                    if(maps[nx][ny] == 1 && !visited[nx][ny]){
                        visited[nx][ny] = true;
                        maps[nx][ny] += maps[point.x][point.y];
                        que.offer(new Point(nx, ny));
                    }
                }
            }
        }
    }
}