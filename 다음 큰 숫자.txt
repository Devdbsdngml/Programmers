// 첫번 째 풀이
// 로직은 맞는 것 같은데 시간초과 뜸
class Solution {
    public int solution(int n) {
        int answer = 0;
        
        String binaryString = Integer.toBinaryString(n);
        int cnt = 0;
        int cntCompare = 0;
        
        for(int i=0; i<binaryString.length(); i++){
            if(binaryString.charAt(i) == '1')
                cnt++;
        }
        
        for(int i=n+1; ; i++){
            String str = Integer.toBinaryString(i);
            for(int j=0; j<str.length(); j++){
                if(str.charAt(j) == '1')
                    cntCompare++;
            }
            if(cnt == cntCompare)
                return i;
        }
    }
}

// 두번 째 풀이
// 2진수로 변환한 String에서 1의 갯수를 세는 것을 메소드로 만들어서
// 실행시키니 통과됨
class Solution {
    public int solution(int n) {
        int answer = 0;
        
        String binaryString = Integer.toBinaryString(n);
        int cnt = countBit(binaryString);
        
        for(int i=n+1; ; i++){
            String str = Integer.toBinaryString(i);
            int cntCompare = countBit(str);
            
            if(cnt == cntCompare)
                return i;
        }
    }
    
    public int countBit(String s){
        int cnt = 0;
        for(int i=0; i<s.length(); i++){
            if(s.charAt(i) == '1')
                cnt++;
        }
        return cnt;
    }
}

// 다른 사람 풀이 참고
// 자바의 Integer 클래스에 내장된 메소드 중 bitCount(int i)라는 메소드가 있음
// 이는 2진수 비트데이터 중 1비트의 수를 카운트 해주는 메소드임

class Solution {
  public int solution(int n) {
      int bitCount = Integer.bitCount(n);
        for(int i = n+1; ;i++) {
            if(bitCount == Integer.bitCount(i)) {
                return i;
            }
        }
  }
}
