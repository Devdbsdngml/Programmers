// 첫번째 접근 방식은
// dfs로 모든 배열 구한 후 cnt 변수를 주어 k와 같을 때 출력
// n이 20이하여서 1~20까지 배열을 모두 다 돌면 시간이 어마어마 해짐

// dfs로 5까지 배열 모두 출력 후 규칙들을 찾아서 접근함
// 2시간이나 걸림

import java.util.ArrayList;

class Solution {
    /*
    
    idx : 0 1 2
    val : 1 2 3
    
    n = 3, k = 5 라 할때, 
    인덱스별로 (n-1)! (n-2)! (n-3)!... 만큼 숫자가 반복된다.
    즉 0번째 인덱스( (3-1)! = 2! = 2 )에 1이 두번, 2도 두번, 3도 두번씩 나옴
    
    dfs로 배열 만들어서 확인해보면 규칙을 찾을 수 있음
    
    */
    public int[] solution(int n, long k) {
        int[] answer = new int[n];
        long[] fac = new long[n]; // 각 인덱스별로 팩토리얼 값을 담을 배열
        ArrayList<Integer> list = new ArrayList<>(); // 1~n 까지 담을 리스트
        
        // init fac 배열, list
        fac[n-1] = 1; // 마지막 인덱스는 0! 인데 0!이 1임
        for(int i=0; i<fac.length-1; i++){
            fac[i] = getFac(n-(i+1));
        }
        
        for(int i=1; i<=n; i++){
            list.add(i);
        }
        
        /*
        0 : 1, 2, 3
        1 : 1, 3, 2
        2 : 2, 1, 3
        3 ; 2, 3, 1
        4 : 3, 1, 2
        5 : 3, 2, 1 이때문에 k--함
        */
        k--;
        for(int i=0; i<n; i++){
            int idx = (int) (k/fac[i]);
            k %= fac[i];
            
            answer[i] = list.get(idx);
            list.remove(idx);
        }
        
        return answer;
    }
    
    long getFac(int num){
        long res = 1;
        
        while(num > 0){
            res *= num;
            num--;
        }
        
        return res;
    }
}