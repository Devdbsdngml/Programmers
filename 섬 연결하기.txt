import java.util.*;

class Solution {
    class Island implements Comparable<Island>{
        int from;
        int to;
        int cost;
        
        Island(int from, int to, int cost){
            this.from = from;
            this.to = to;
            this.cost = cost;
        }
        
        @Override
        public int compareTo(Island obj){
            return this.cost - obj.cost;
        }
    }
    
    int[] parent;
    
    public int solution(int n, int[][] costs) {
        int answer = 0;
        PriorityQueue<Island> que = new PriorityQueue<>();
        parent = new int[n];
        
        for(int i=0; i<costs.length; i++){
            que.add(new Island(costs[i][0], costs[i][1], costs[i][2]));
        }
        
        for(int i=0; i<n; i++){
            parent[i] = i;
        }
        
        while(!que.isEmpty()){
            Island island = que.poll();
            
            if(find(island.from) == find(island.to)){
                continue;
            } else{
                union(island.from, island.to);
                answer += island.cost;
            }
        }
        
        return answer;
    }
    
    // 부모 찾기
    int find(int child){
        if(parent[child] == child){
            return child;
        } else{
            return parent[child] = find(parent[child]);
        }
    }
    
    // 연결하기
    void union(int a, int b){
        int rootA = find(a);
        int rootB = find(b);
        
       if(rootA != rootB){
           parent[rootB] = rootA;
       }
    }
}