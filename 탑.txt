import java.util.*;

class Solution {
    class Top{
        int val;
        int idx;
        Top(int val, int idx){
            this.val = val;
            this.idx = idx;
        }
    }
    
    public int[] solution(int[] heights) {
        int[] answer = new int[heights.length];
        Stack<Top> s = new Stack<Top>();
        
        for(int i=heights.length-1; i>=0; i--){
            for(int j=i-1; j>=0; j--){
                if(heights[i] < heights[j]){
                    s.push(new Top(i+1, j+1));
                    break;
                } else if(j == 0)
                    s.push(new Top(i+1, 0));
            }
        }
        
        int size = s.size();
        answer[0] = 0;
        for(int i=1; i<=size; i++)
            answer[i] = s.pop().idx;
        
        return answer;
    }
}



import java.util.*;

class Solution {
    class Top{
        int val;
        int idx;
        Top(int val, int idx){
            this.val = val;
            this.idx = idx;
        }
    }
    
    public int[] solution(int[] heights) {
        int[] answer = new int[heights.length];
        Stack<Top> s = new Stack<>();
        
        for(int i=0; i<heights.length; i++){
            Top t = new Top(heights[i], i+1);
            int rec = 0;
            
            while(!s.isEmpty()){
                Top top = s.peek();
                if(top.val > t.val){
                    rec = top.idx;
                    break;
                }
                s.pop();
            }
            s.push(t);
            answer[i] = rec;
        }
        
        return answer;
    }
}