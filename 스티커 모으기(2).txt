class Solution {
    public int solution(int sticker[]) {
        int answer = 0;
        
        if(sticker.length == 1) return sticker[0];
        if(sticker.length == 2) return Math.max(sticker[0], sticker[1]);
        if(sticker.length == 3) return Math.max(sticker[0], Math.max(sticker[1], sticker[2]));
        
        int[] dp1 = new int[sticker.length];
        int[] dp2 = new int[sticker.length];
        
        dp1[0] = dp1[1] = sticker[0]; // 0번째 인덱스 스티커를 뜯어낼 경우
        dp2[0] = 0; dp2[1] = sticker[1]; // 1번째 인덱스 스티커를 뜯어낼 경우
        
        for(int i=2; i<sticker.length-1; i++){
            dp1[i] = Math.max(dp1[i-2] + sticker[i], dp1[i-1]);
            dp2[i] = Math.max(dp2[i-2] + sticker[i], dp2[i-1]);
        }
        
        int n = sticker.length-1;
        
        dp1[n] = Math.max(dp1[n-1], dp1[n-2]); // 0번째 인덱스 스티커를 뜯어냈을 경우, 마지막 스티커 못 뜯어냄
        dp2[n] = Math.max(dp2[n-2] + sticker[n], dp2[n-1]); // 1번째 뜯어냈을 경우, 마지막 스티커 뜯어냄

        return answer = Math.max(dp1[n], dp2[n]);
    }
}