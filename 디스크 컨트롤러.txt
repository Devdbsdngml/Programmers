// 첫 번째 풀이
// 간단하게 풀면 되는 줄 알았는데 매우 틀림
import java.util.*;

class Solution {
    public int solution(int[][] jobs) {
        int answer = 0;
        
        /*
        
        0 1 2    -> 0 2 1
        3 9 6    -> 3 6 9
        
        3 - 0 = 3
        3+6 = 9 - 2 = 7
        9+9 = 18 - 1 = 17
        
        */
        
        Arrays.sort(jobs, new Comparator<int[]>(){
            @Override
            public int compare(int[] a, int[] b){
                return a[1] - b[1];
            }
        });
        
        int min = 0;
        
        for(int i=0; i<jobs.length; i++){
            min += jobs[i][1];
            answer += min - jobs[i][0];
        }
        
        return answer / jobs.length;
    }
}

// 두 번째 풀이

import java.util.*;

class Solution {
    class Job{
        int requestTime;
        int workTime;
        
        Job(int requestTime, int workTime){
            this.requestTime = requestTime;
            this.workTime = workTime;
        }
    }
    
    public int solution(int[][] jobs) {
        int answer = 0;
        
        LinkedList<Job> waitList = new LinkedList<>();
        
        // 우선 순위 큐 생성. 작업시간 기준으로 오름차순으로 정렬
        PriorityQueue<Job> que = new PriorityQueue<Job>(new Comparator<Job>(){
            @Override
            public int compare(Job a, Job b){
                return a.workTime - b.workTime;
            }
        });
        
        // 대기 리스트에 작업 삽입
        for(int[] i : jobs){
            waitList.add(new Job(i[0], i[1]));
        }
        
        // 대기 리스트를 요청시간 기준으로 오름차순 정렬
        Collections.sort(waitList, new Comparator<Job>(){
            @Override
            public int compare(Job a, Job b){
                return a.requestTime - b.requestTime;
            }
        });
        
        int cnt = 0;
        int time = waitList.peek().requestTime;
        
        while(cnt < jobs.length){
            // 대기 리스트에서 현재 요청시간보다 작은 작업을 작업 큐로 이동
            while(!waitList.isEmpty() && waitList.peek().requestTime <= time){
                que.add(waitList.poll());
            }
            // 작업 큐에서 작업시간이 작은 작업을 꺼냄
            if(!que.isEmpty()){
                Job job = que.poll();
                time += job.workTime;
                answer += time - job.requestTime;
                cnt++;
            } 
            // 작업 큐가 없다면 현재 요청시간을 +1 해줌
            else{
                time++;
            }
        }
        
        return answer / jobs.length;
    }
}