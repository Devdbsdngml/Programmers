class Solution {
    public String solution(String number, int k) {
        StringBuilder sb = new StringBuilder();
        int idx = 0;
        
        // return 할 값의 자릿수는 number.length()-k 보다 클 수 없다
        // 즉, number.length()-k 개수만큼 뽑으면 됨
        for(int i=0; i<number.length()-k; i++){
            char maxVal = '0';
            // 현재의 위치부터 다음 숫자를 뽑을 때까지 범위
            // 뽑을 숫자는 이 범위 안에서 최소한 한개는 나와야 됨
            // 큰 숫자가 발견이 되었을 때 maxVal을 바꿔주고
            // 그 다음 숫자부터 검색을 하면 되기에 idx = j + 1; 을 해줌
            for(int j=idx; j<=k+i; j++){
                if(number.charAt(j) > maxVal){
                    maxVal = number.charAt(j);
                    idx = j+1;
                }
            }
            sb.append(maxVal);
        }
        return sb.toString();
    }
}

// 다른 사람 풀이 (스택을 이용해서 품)
import java.util.Stack;
class Solution {
    public String solution(String number, int k) {
        char[] result = new char[number.length() - k];
        Stack<Character> stack = new Stack<>();

        for (int i=0; i<number.length(); i++) {
            char c = number.charAt(i);
            while (!stack.isEmpty() && stack.peek() < c && k-- > 0) {
                stack.pop();
            }
            stack.push(c);
        }
        for (int i=0; i<result.length; i++) {
            result[i] = stack.get(i);
        }
        return new String(result);
    }
}