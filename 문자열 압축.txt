class Solution {
    public int solution(String s) {
        int answer = s.length();
        
        // i가 문자열을 자를 단위임
        // 즉, 1개의 단위로 잘랐을 때(i=1) 2개의 단위로 잘랐을 때(i=2)
        // i를 늘려갈 수록 문자열 압축이 된다면 더 짧게 압축이 될 수 있음
        for(int i = 1; i <= s.length() / 2; i++){
            int pos = 0;
            int len = s.length();
            
            
            while(pos + i <= s.length()){
                String unit = s.substring(pos, pos + i);
                pos += i;
                
                int cnt = 0;
                while(pos + i <= s.length()){
                    if(unit.equals(s.substring(pos, pos + i))){
                        cnt++;
                        pos += i;
                    } else
                        break;
                }
                
                if(cnt > 0){
                    len -= i * cnt;
                    //len += (int)Math.log10(cnt)+1;
                    if(cnt < 9) len += 1;
                    else if(cnt < 99) len += 2;
                    else if(cnt < 999) len += 3;
                    else len += 4;
                }
            }
            answer = Math.min(answer, len);
        }
        return answer;
    }
}

// 다른 사람 풀이(시간이 오래 걸림)
class Solution {
    public int solution(String s) {
        int answer = s.length();
        
        for(int i=1; i<=s.length()/2; i++){
            String comStr = compress(s, i);
            answer = comStr.length() < answer ? comStr.length() : answer;
        }
        return answer;
    }
    
    String compress(String string, int slice){
        StringBuilder sb = new StringBuilder();
        String str = string + " "; // substring을 위한 공백 하나 추가
        
        String pre = ""; // 이전 문자열
        int cnt = 1; // 압축되는 문자 갯수
        int i; 
        for (i = 0; i < str.length() - slice; i += slice){
            String subStr = str.substring(i, i + slice); // 그 다음 문자열
            if (subStr.equals(pre)){ // 이전 문자열과 현재 문자열이 같으면 cnt 증가
                cnt++;
            } else{
                if (cnt != 1) sb.append(cnt); // cnt가 1일때 삽입하지 않음
                sb.append(pre);
                pre = subStr;
                cnt = 1;
            }
        }
        
        if (cnt != 1) sb.append(cnt);
        sb.append(pre);
        if (i < string.length()) sb.append(string.substring(i)); // 나머지 substring 삽입

        return sb.toString();
    }
}